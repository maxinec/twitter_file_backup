/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.duckforge.twitter_file_backup;

import com.duckforge.twitter_file_backup.configuration.ConfigBuilder;
import com.duckforge.twitter_file_backup.configuration.S3Config;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;

import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3ClientBuilder;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

public class TwitterFileBackup {
    private static final Logger LOGGER = LogManager.getLogger("com.duckforge.twitterFileBackup");
    private final S3Config s3Config;

    TwitterFileBackup(S3Config s3Config) {
        this.s3Config = s3Config;
    }

    @SuppressWarnings("unchecked")
    <T> WatchEvent<T> cast(WatchEvent<?> event) {
        return (WatchEvent<T>)event;
    }

    void backupToS3(String watchFolder) throws IOException {
        Path baseFolder = Paths.get(watchFolder);
        WatchService watcher = FileSystems.getDefault().newWatchService();
        WatchKey watchKey = baseFolder.register(watcher, ENTRY_CREATE);

        Region region = Region.of(s3Config.getRegion());

        S3ClientBuilder builder =  S3Client
            .builder()
            .httpClientBuilder(UrlConnectionHttpClient.builder())
            .region(region);

        if (s3Config.getSecretKey() != null && s3Config.getAccessKey() != null) {
            builder = builder.credentialsProvider(
                StaticCredentialsProvider.create(
                    AwsBasicCredentials.create(
                        s3Config.getAccessKey(), s3Config.getSecretKey()
                    )
                )
            );
        } else if (s3Config.getAwsProfileName() != null) {
            builder = builder.credentialsProvider(
                ProfileCredentialsProvider.create(
                    s3Config.getAwsProfileName()
                )
            );
        }

        S3Client s3 = builder.build();

        for (;;) {
            for (WatchEvent<?> event: watchKey.pollEvents()) {
                WatchEvent.Kind kind = event.kind();
                WatchEvent<Path> ev = cast(event);
                Path createdFile = ev.context();
                String s3FileKey = createdFile.getFileName().toString();

                if (kind.name().equals("ENTRY_CREATE") && s3FileKey.endsWith(".gz")) {
                    String originFile = watchFolder + File.separator + s3FileKey;
                    if (s3Config.getFilePrefix() != null) {
                        s3FileKey = s3Config.getFilePrefix() + s3FileKey;
                    }
                        LOGGER.info("Uploading " + originFile + " to s3://" + s3Config.getBucket() + "/" + s3FileKey);
                        s3.putObject(
                        PutObjectRequest.builder().bucket(s3Config.getBucket()).key(s3FileKey).build(),
                        RequestBody.fromFile(new File(originFile))
                    );
                }
            }

            // reset key and return if directory no longer accessible
            if (!watchKey.reset()) {
                return;
            }
        }
    }

    public static void main(String[] args) throws IOException, ConfigurationException {
        if (args.length != 1) {
            System.out.println("Usage: TwitterFileBackup <config-file>");
            return;
        }

        ConfigBuilder configBuilder = new ConfigBuilder(args[0]);
        S3Config s3Config = configBuilder.getS3Config();
        TweetStream tweetStream = new TweetStream(configBuilder.getTwitterLoaderConfig());

//        Thread thread = new Thread(tweetStream);
//        Runtime.getRuntime().addShutdownHook(new Thread(() -> tweetStream.close()));
//        LOGGER.info("Starting twitter stream");
//        thread.start();

        if (s3Config != null) {
            LOGGER.info("Starting file watcher");
            TwitterFileBackup twitterFileBackup = new TwitterFileBackup(s3Config);
            String s3BaseFolder = System.getProperty("logFolder");
            twitterFileBackup.backupToS3(s3BaseFolder);
        }
    }
}
